
//Base Class Car
class Car {
 // Encapsulation: private variables and public methods
 private String make;
 private String model;
 private int year;

 public Car(String make, String model, int year) {
     this.make = make;
     this.model = model;
     this.year = year;
 }

 public String getMake() {
     return make;
 }

 public void setMake(String make) {
     this.make = make;
 }

 public String getModel() {
     return model;
 }

 public void setModel(String model) {
     this.model = model;
 }

 public int getYear() {
     return year;
 }

 public void setYear(int year) {
     this.year = year;
 }
}

//Composition: Engine Class
class Engine {
 private int horsepower;

 public Engine(int horsepower) {
     this.horsepower = horsepower;
 }

 public int getHorsepower() {
     return horsepower;
 }
}


@overdrive 


public class Main {
	
    public static void main(String[] args) {
    	
        Engine sportsEngine = new Engine(608);
        
        SportsCar sportsCar = new SportsCar("Porsche ", "918", 2020, sportsEngine);
        
        System.out.println("Make: " + sportsCar.getMake()); // which car company 
        
        System.out.println("Model: " + sportsCar.getModel()); // which model of the  car 
        
        System.out.println("Year: " + sportsCar.getYear()); // what year the car is made in
        
        System.out.println("Horsepower: " + sportsCar.getEngine().getHorsepower()); // the horsepower of the car

        FamilyCar familyCar = new FamilyCar("jeep", "trackhawk", 2020, 5);
        
        System.out.println("Make: " + familyCar.getMake()); // which car company
        
        System.out.println("Model: " + familyCar.getModel()); // which model of the car 
        
        System.out.println("Year: " + familyCar.getYear()); // what year the car is made in
        
        System.out.println("Seats: " + familyCar.getSeats()); // how many seats are in the car 
    }
}

@overdrive 


//Inheritance: FamilyCar Class
class FamilyCar extends Car {
 private int seats;

 public FamilyCar(String make, String model, int year, int seats) {
     super(make, model, year);
     this.seats = seats;
 }

 public int getSeats() {
     return seats;
 }
}

@overdrive 

	
// Polymorphism : overriding 
	class SportsCar extends Car {
		
		
	    public String getModel() {
	        return "Sports " + super.getModel();
	    }

	    private Engine engine;

	    public SportsCar(String make, String model, int year, Engine engine) {
	        super(make, model, year);
	        this.engine = engine;
	    }

	    public Engine getEngine() {
	        return engine;
	    }
	}








